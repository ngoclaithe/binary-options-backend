import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
export declare class UsersController {
    private readonly usersService;
    constructor(usersService: UsersService);
    create(createUserDto: CreateUserDto): Promise<{
        id: string;
        email: string;
        username: string;
        fullName: string;
        phone: string;
        role: import("./entities/user.entity").UserRole;
        status: import("./entities/user.entity").UserStatus;
        isEmailVerified: boolean;
        avatarUrl: string;
        lastLoginAt: Date;
        createdAt: Date;
        updatedAt: Date;
        wallet: import("../wallet/entities/wallet.entity").Wallet;
        orders: import("../trading/entities/order.entity").Order[];
    }>;
    findAll(): Promise<import("./entities/user.entity").User[]>;
    getProfile(req: any): Promise<{
        id: string;
        email: string;
        username: string;
        fullName: string;
        phone: string;
        role: import("./entities/user.entity").UserRole;
        status: import("./entities/user.entity").UserStatus;
        isEmailVerified: boolean;
        avatarUrl: string;
        lastLoginAt: Date;
        createdAt: Date;
        updatedAt: Date;
        wallet: import("../wallet/entities/wallet.entity").Wallet;
        orders: import("../trading/entities/order.entity").Order[];
    }>;
    findOne(id: string): Promise<{
        id: string;
        email: string;
        username: string;
        fullName: string;
        phone: string;
        role: import("./entities/user.entity").UserRole;
        status: import("./entities/user.entity").UserStatus;
        isEmailVerified: boolean;
        avatarUrl: string;
        lastLoginAt: Date;
        createdAt: Date;
        updatedAt: Date;
        wallet: import("../wallet/entities/wallet.entity").Wallet;
        orders: import("../trading/entities/order.entity").Order[];
    }>;
    update(id: string, updateUserDto: UpdateUserDto): Promise<{
        id: string;
        email: string;
        username: string;
        fullName: string;
        phone: string;
        role: import("./entities/user.entity").UserRole;
        status: import("./entities/user.entity").UserStatus;
        isEmailVerified: boolean;
        avatarUrl: string;
        lastLoginAt: Date;
        createdAt: Date;
        updatedAt: Date;
        wallet: import("../wallet/entities/wallet.entity").Wallet;
        orders: import("../trading/entities/order.entity").Order[];
    }>;
    remove(id: string): Promise<void>;
}
